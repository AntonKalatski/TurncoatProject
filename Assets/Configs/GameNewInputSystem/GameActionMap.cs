//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Configs/GameNewInputSystem/GameActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameNewInputSystem
{
    public partial class @GameActionsMap : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameActionsMap()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameActionMap"",
    ""maps"": [
        {
            ""name"": ""UnitControl"",
            ""id"": ""4eddddb9-2925-4f97-989d-b278221d93a5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""3f65a32a-617c-469d-8470-54683f061bf8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""73787aca-e8e9-4ad7-8345-3c79e193e9d0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0977b55b-7397-47ff-ade5-c6f67c7d880d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50b9c49a-7aa2-466d-a042-d0442ade7503"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // UnitControl
            m_UnitControl = asset.FindActionMap("UnitControl", throwIfNotFound: true);
            m_UnitControl_Move = m_UnitControl.FindAction("Move", throwIfNotFound: true);
            m_UnitControl_MousePosition = m_UnitControl.FindAction("MousePosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // UnitControl
        private readonly InputActionMap m_UnitControl;
        private IUnitControlActions m_UnitControlActionsCallbackInterface;
        private readonly InputAction m_UnitControl_Move;
        private readonly InputAction m_UnitControl_MousePosition;
        public struct UnitControlActions
        {
            private @GameActionsMap m_Wrapper;
            public UnitControlActions(@GameActionsMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_UnitControl_Move;
            public InputAction @MousePosition => m_Wrapper.m_UnitControl_MousePosition;
            public InputActionMap Get() { return m_Wrapper.m_UnitControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UnitControlActions set) { return set.Get(); }
            public void SetCallbacks(IUnitControlActions instance)
            {
                if (m_Wrapper.m_UnitControlActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_UnitControlActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_UnitControlActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_UnitControlActionsCallbackInterface.OnMove;
                    @MousePosition.started -= m_Wrapper.m_UnitControlActionsCallbackInterface.OnMousePosition;
                    @MousePosition.performed -= m_Wrapper.m_UnitControlActionsCallbackInterface.OnMousePosition;
                    @MousePosition.canceled -= m_Wrapper.m_UnitControlActionsCallbackInterface.OnMousePosition;
                }
                m_Wrapper.m_UnitControlActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @MousePosition.started += instance.OnMousePosition;
                    @MousePosition.performed += instance.OnMousePosition;
                    @MousePosition.canceled += instance.OnMousePosition;
                }
            }
        }
        public UnitControlActions @UnitControl => new UnitControlActions(this);
        public interface IUnitControlActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnMousePosition(InputAction.CallbackContext context);
        }
    }
}
